{
  "version": 3,
  "sources": ["../../../../../node_modules/@pscoped/ngx-pub-sub/fesm2020/pscoped-ngx-pub-sub.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { ReplaySubject } from 'rxjs/internal/ReplaySubject';\nimport { Subject } from 'rxjs/internal/Subject';\nvar SubjectType;\n(function (SubjectType) {\n  SubjectType[SubjectType[\"Subject\"] = 0] = \"Subject\";\n  SubjectType[SubjectType[\"BehaviorSubject\"] = 1] = \"BehaviorSubject\";\n  SubjectType[SubjectType[\"ReplaySubject\"] = 2] = \"ReplaySubject\";\n})(SubjectType || (SubjectType = {}));\nclass NgxPubSubService {\n  constructor() {\n    this.eventObservableMapping = {};\n  }\n  publishEvent(eventName, data) {\n    this.validateEventName(eventName);\n    this.createSubjectIfNotExist(eventName);\n    this.publishNext(eventName, SubjectType.Subject, data);\n  }\n  subscribe(eventName, next, error, complete) {\n    this.validateEventName(eventName);\n    // subject will be created if the provided eventName is not registered\n    this.createSubjectIfNotExist(eventName);\n    return this.eventObservableMapping[eventName].ref.subscribe(next, error, complete);\n  }\n  /**\r\n   * Use this method to get the Observable associated with the event.\r\n   * Useful when you would like to apply additional rxjs operators like debounceTime\r\n   */\n  getEventObservable(eventName) {\n    this.validateEventName(eventName);\n    // subject will be created if the provided eventName is not registered\n    this.createSubjectIfNotExist(eventName);\n    return this.eventObservableMapping[eventName].ref.asObservable();\n  }\n  registerEventWithLastValue(name, defaultValue) {\n    this.validateEventName(name);\n    // type and name check\n    this.checkEventType(name, SubjectType.BehaviorSubject, true);\n    // create one\n    this.eventObservableMapping[name] = {\n      type: SubjectType.BehaviorSubject,\n      ref: new BehaviorSubject(defaultValue)\n    };\n  }\n  registerEventWithHistory(name, bufferSize, windowTime, scheduler) {\n    this.validateEventName(name);\n    // type and name check\n    this.checkEventType(name, SubjectType.ReplaySubject, true);\n    // create one\n    this.eventObservableMapping[name] = {\n      type: SubjectType.ReplaySubject,\n      ref: new ReplaySubject(bufferSize, windowTime, scheduler)\n    };\n  }\n  publishWithLast(eventName, data) {\n    this.validateEventName(eventName);\n    this.publishNext(eventName, SubjectType.BehaviorSubject, data);\n  }\n  publishWithHistory(eventName, data) {\n    this.validateEventName(eventName);\n    this.publishNext(eventName, SubjectType.ReplaySubject, data);\n  }\n  completeEvent(eventName) {\n    this.validateEventName(eventName);\n    if (!this.eventObservableMapping[eventName]) {\n      throw Error('Event not created yet');\n    }\n    this.completeObservableAndDestroyMapping(eventName);\n  }\n  ngOnDestroy() {\n    for (const eventName in this.eventObservableMapping) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.eventObservableMapping.hasOwnProperty(eventName)) {\n        this.completeObservableAndDestroyMapping(eventName);\n      }\n    }\n  }\n  publishNext(eventName, type = SubjectType.Subject, data) {\n    this.checkEventType(eventName, type);\n    this.eventObservableMapping[eventName].ref.next(data);\n  }\n  checkEventType(eventName, type = SubjectType.Subject, shouldNotExist = false) {\n    const object = this.eventObservableMapping[eventName];\n    let errorMessage;\n    if (!object && shouldNotExist) {\n      return;\n    }\n    if (!object) {\n      errorMessage = `Event doesn't exist of type: ${SubjectType[type]} or it has been completed`;\n    } else if (object.type !== type) {\n      errorMessage = `Event exists with other type: ${SubjectType[object.type]}. Expected type: ${SubjectType[type]}`;\n    }\n    if (shouldNotExist && object.type === type) {\n      errorMessage = `Event already registerd with the same type. Don't register a second time`;\n    }\n    if (errorMessage) {\n      throw Error(`Error (${eventName}): ${errorMessage}`);\n    }\n  }\n  createSubjectIfNotExist(eventName) {\n    const object = this.eventObservableMapping[eventName];\n    if (object) {\n      return;\n    }\n    this.eventObservableMapping[eventName] = {\n      type: SubjectType.Subject,\n      ref: new Subject()\n    };\n  }\n  validateEventName(eventName) {\n    if (!eventName) {\n      throw Error('Event name not provided');\n    }\n  }\n  completeObservableAndDestroyMapping(eventName) {\n    this.eventObservableMapping[eventName].ref.complete();\n    delete this.eventObservableMapping[eventName];\n  }\n}\nNgxPubSubService.ɵfac = function NgxPubSubService_Factory(t) {\n  return new (t || NgxPubSubService)();\n};\nNgxPubSubService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgxPubSubService,\n  factory: NgxPubSubService.ɵfac\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPubSubService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\nclass NgxPubSubModule {}\nNgxPubSubModule.ɵfac = function NgxPubSubModule_Factory(t) {\n  return new (t || NgxPubSubModule)();\n};\nNgxPubSubModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxPubSubModule,\n  imports: [CommonModule]\n});\nNgxPubSubModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [NgxPubSubService],\n  imports: [CommonModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxPubSubModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [NgxPubSubService]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPubSubModule, NgxPubSubService };\n\n"],
  "mappings": "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",
  "names": ["SubjectType"]
}
