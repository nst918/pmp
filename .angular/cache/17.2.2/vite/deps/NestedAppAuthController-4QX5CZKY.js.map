{
  "version": 3,
  "sources": ["../../../../../node_modules/@azure/msal-browser/dist/naa/BridgeError.mjs", "../../../../../node_modules/@azure/msal-browser/dist/naa/mapping/NestedAppAuthAdapter.mjs", "../../../../../node_modules/@azure/msal-browser/dist/error/NestedAppAuthError.mjs", "../../../../../node_modules/@azure/msal-browser/dist/controllers/NestedAppAuthController.mjs"],
  "sourcesContent": ["/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nfunction isBridgeError(error) {\n    return error.status !== undefined;\n}\n\nexport { isBridgeError };\n\n", "/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\nimport { RequestParameterBuilder, StringUtils, AuthenticationScheme, createClientAuthError, ClientAuthErrorCodes, AuthToken, AuthError, InteractionRequiredAuthError, ServerError, ClientAuthError } from '@azure/msal-common';\nimport { isBridgeError } from '../BridgeError.mjs';\nimport { BridgeStatusCode } from '../BridgeStatusCode.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthAdapter {\n    constructor(clientId, clientCapabilities, crypto, logger) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n    toNaaTokenRequest(request) {\n        let extraParams;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map();\n        }\n        else {\n            extraParams = new Map(Object.entries(request.extraQueryParameters));\n        }\n        const requestBuilder = new RequestParameterBuilder();\n        const claims = requestBuilder.addClientCapabilitiesToClaims(request.claims, this.clientCapabilities);\n        const tokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: request.scopes.join(\" \"),\n            correlationId: request.correlationId !== undefined\n                ? request.correlationId\n                : this.crypto.createNewGuid(),\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n        return tokenRequest;\n    }\n    fromNaaTokenResponse(request, response, reqTimestamp) {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n        const expiresOn = new Date((reqTimestamp + (response.token.expires_in || 0)) * 1000);\n        const idTokenClaims = AuthToken.extractTokenClaims(response.token.id_token, this.crypto.base64Decode);\n        const account = this.fromNaaAccountInfo(response.account, idTokenClaims);\n        const scopes = response.token.scope || request.scope;\n        const authenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: true,\n            expiresOn: expiresOn,\n            tokenType: request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n        return authenticationResult;\n    }\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    fromNaaAccountInfo(fromAccount, idTokenClaims) {\n        const effectiveIdTokenClaims = idTokenClaims || fromAccount.idTokenClaims;\n        const localAccountId = fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n        const tenantId = fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n        const homeAccountId = fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n        const username = fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n        const account = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: fromAccount.idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n        };\n        return account;\n    }\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    fromBridgeError(error) {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.UserCancel:\n                    return new ClientAuthError(ClientAuthErrorCodes.userCanceled);\n                case BridgeStatusCode.NoNetwork:\n                    return new ClientAuthError(ClientAuthErrorCodes.noNetworkConnectivity);\n                case BridgeStatusCode.AccountUnavailable:\n                    return new ClientAuthError(ClientAuthErrorCodes.noAccountFound);\n                case BridgeStatusCode.Disabled:\n                    return new ClientAuthError(ClientAuthErrorCodes.nestedAppAuthBridgeDisabled);\n                case BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new ClientAuthError(error.code ||\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled, error.description);\n                case BridgeStatusCode.TransientError:\n                case BridgeStatusCode.PersistentError:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.UserInteractionRequired:\n                    return new InteractionRequiredAuthError(error.code, error.description);\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        }\n        else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n}\n\nexport { NestedAppAuthAdapter };\n\n", "/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\nimport { AuthError } from '@azure/msal-common';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n/**\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\n */\nconst NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\",\n    },\n};\nclass NestedAppAuthError extends AuthError {\n    constructor(errorCode, errorMessage) {\n        super(errorCode, errorMessage);\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n    static createUnsupportedError() {\n        return new NestedAppAuthError(NestedAppAuthErrorMessage.unsupportedMethod.code, NestedAppAuthErrorMessage.unsupportedMethod.desc);\n    }\n}\n\nexport { NestedAppAuthError, NestedAppAuthErrorMessage };\n\n", "/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, PerformanceEvents, TimeUtils } from '@azure/msal-common';\nimport { InteractionType } from '../utils/BrowserConstants.mjs';\nimport { CryptoOps } from '../crypto/CryptoOps.mjs';\nimport { NestedAppAuthAdapter } from '../naa/mapping/NestedAppAuthAdapter.mjs';\nimport { NestedAppAuthError } from '../error/NestedAppAuthError.mjs';\nimport { EventHandler } from '../event/EventHandler.mjs';\nimport { EventType } from '../event/EventType.mjs';\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass NestedAppAuthController {\n    constructor(operatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        }\n        else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(this.config.auth.clientId, this.config.auth.clientCapabilities, this.browserCrypto, this.logger);\n    }\n    getBrowserStorage() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    getEventHandler() {\n        return this.eventHandler;\n    }\n    static async createController(operatingContext) {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n    initialize() {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n    async acquireTokenInteractive(request) {\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Popup, request);\n        const atPopupMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup, request.correlationId);\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(naaRequest);\n            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Popup, result);\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        }\n        catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Popup, null, e);\n            atPopupMeasurement.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        }\n    }\n    async acquireTokenSilentInternal(request) {\n        this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_START, InteractionType.Silent, request);\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SsoSilent, request.correlationId);\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n        try {\n            const naaRequest = this.nestedAppAuthAdapter.toNaaTokenRequest(request);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n            const result = this.nestedAppAuthAdapter.fromNaaTokenResponse(naaRequest, response, reqTimestamp);\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_SUCCESS, InteractionType.Silent, result);\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        }\n        catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(EventType.ACQUIRE_TOKEN_FAILURE, InteractionType.Silent, null, e);\n            ssoSilentMeasurement?.end({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false,\n            });\n            throw error;\n        }\n    }\n    async acquireTokenPopup(request) {\n        return this.acquireTokenInteractive(request);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    async acquireTokenSilent(silentRequest) {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenNative(request, apiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n    accountId // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenByRefreshToken(commonRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n    silentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback) {\n        return this.eventHandler.addEventCallback(callback);\n    }\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId) {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter) {\n        throw NestedAppAuthError.createUnsupportedError();\n        // TODO: Look at standard implementation\n    }\n    getAccountByHomeId(homeAccountId) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.homeAccountId === homeAccountId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAccountByLocalId(localId) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.localAccountId === localId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAccountByUsername(userName) {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.username === userName) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n    getAllAccounts() {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return [\n                this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount),\n            ];\n        }\n        else {\n            return [];\n        }\n    }\n    handleRedirectPromise(hash // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    loginPopup(request // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        if (request !== undefined) {\n            return this.acquireTokenInteractive(request);\n        }\n        else {\n            throw NestedAppAuthError.createUnsupportedError();\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(logoutRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request) {\n        return this.acquireTokenSilentInternal(request);\n    }\n    getTokenCache() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    /**\n     * Returns the logger instance\n     */\n    getLogger() {\n        return this.logger;\n    }\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger) {\n        this.logger = logger;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account) {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n        return;\n    }\n    getActiveAccount() {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n        }\n        else {\n            return null;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku, version) {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient) {\n        this.logger.warning(\"setNavigationClient is not supported in nested app auth\");\n    }\n    getConfiguration() {\n        return this.config;\n    }\n    isBrowserEnv() {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto() {\n        return this.browserCrypto;\n    }\n    getPerformanceClient() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    getRedirectResponse() {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    preflightBrowserEnvironmentCheck(interactionType, // eslint-disable-line @typescript-eslint/no-unused-vars\n    setInteractionInProgress // eslint-disable-line @typescript-eslint/no-unused-vars\n    ) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    result, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    request) {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n}\n\nexport { NestedAppAuthController };\n\n"],
  "mappings": "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",
  "names": []
}
