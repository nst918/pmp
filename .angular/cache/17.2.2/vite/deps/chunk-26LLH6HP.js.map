{
  "version": 3,
  "sources": ["../../../../../node_modules/@azure/msal-browser/dist/telemetry/BrowserPerformanceMeasurement.mjs"],
  "sourcesContent": ["/*! @azure/msal-browser v3.10.0 2024-02-17 */\n'use strict';\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nclass BrowserPerformanceMeasurement {\n    constructor(name, correlationId) {\n        this.correlationId = correlationId;\n        this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);\n        this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);\n        this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);\n    }\n    static makeMeasureName(name, correlationId) {\n        return `msal.measure.${name}.${correlationId}`;\n    }\n    static makeStartMark(name, correlationId) {\n        return `msal.start.${name}.${correlationId}`;\n    }\n    static makeEndMark(name, correlationId) {\n        return `msal.end.${name}.${correlationId}`;\n    }\n    static supportsBrowserPerformance() {\n        return (typeof window !== \"undefined\" &&\n            typeof window.performance !== \"undefined\" &&\n            typeof window.performance.mark === \"function\" &&\n            typeof window.performance.measure === \"function\" &&\n            typeof window.performance.clearMarks === \"function\" &&\n            typeof window.performance.clearMeasures === \"function\" &&\n            typeof window.performance.getEntriesByName === \"function\");\n    }\n    /**\n     * Flush browser marks and measurements.\n     * @param {string} correlationId\n     * @param {SubMeasurement} measurements\n     */\n    static flushMeasurements(correlationId, measurements) {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                measurements.forEach((measurement) => {\n                    const measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);\n                    const entriesForMeasurement = window.performance.getEntriesByName(measureName, \"measure\");\n                    if (entriesForMeasurement.length > 0) {\n                        window.performance.clearMeasures(measureName);\n                        window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));\n                        window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));\n                    }\n                });\n            }\n            catch (e) {\n                // Silently catch and return null\n            }\n        }\n    }\n    startMeasurement() {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                window.performance.mark(this.startMark);\n            }\n            catch (e) {\n                // Silently catch\n            }\n        }\n    }\n    endMeasurement() {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                window.performance.mark(this.endMark);\n                window.performance.measure(this.measureName, this.startMark, this.endMark);\n            }\n            catch (e) {\n                // Silently catch\n            }\n        }\n    }\n    flushMeasurement() {\n        if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {\n            try {\n                const entriesForMeasurement = window.performance.getEntriesByName(this.measureName, \"measure\");\n                if (entriesForMeasurement.length > 0) {\n                    const durationMs = entriesForMeasurement[0].duration;\n                    window.performance.clearMeasures(this.measureName);\n                    window.performance.clearMarks(this.startMark);\n                    window.performance.clearMarks(this.endMark);\n                    return durationMs;\n                }\n            }\n            catch (e) {\n                // Silently catch and return null\n            }\n        }\n        return null;\n    }\n}\n\nexport { BrowserPerformanceMeasurement };\n\n"],
  "mappings": ";AAMA,IAAM,gCAAN,MAAM,+BAA8B;AAAA,EAChC,YAAY,MAAM,eAAe;AAC7B,SAAK,gBAAgB;AACrB,SAAK,cAAc,+BAA8B,gBAAgB,MAAM,aAAa;AACpF,SAAK,YAAY,+BAA8B,cAAc,MAAM,aAAa;AAChF,SAAK,UAAU,+BAA8B,YAAY,MAAM,aAAa;AAAA,EAChF;AAAA,EACA,OAAO,gBAAgB,MAAM,eAAe;AACxC,WAAO,gBAAgB,IAAI,IAAI,aAAa;AAAA,EAChD;AAAA,EACA,OAAO,cAAc,MAAM,eAAe;AACtC,WAAO,cAAc,IAAI,IAAI,aAAa;AAAA,EAC9C;AAAA,EACA,OAAO,YAAY,MAAM,eAAe;AACpC,WAAO,YAAY,IAAI,IAAI,aAAa;AAAA,EAC5C;AAAA,EACA,OAAO,6BAA6B;AAChC,WAAQ,OAAO,WAAW,eACtB,OAAO,OAAO,gBAAgB,eAC9B,OAAO,OAAO,YAAY,SAAS,cACnC,OAAO,OAAO,YAAY,YAAY,cACtC,OAAO,OAAO,YAAY,eAAe,cACzC,OAAO,OAAO,YAAY,kBAAkB,cAC5C,OAAO,OAAO,YAAY,qBAAqB;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,kBAAkB,eAAe,cAAc;AAClD,QAAI,+BAA8B,2BAA2B,GAAG;AAC5D,UAAI;AACA,qBAAa,QAAQ,CAAC,gBAAgB;AAClC,gBAAM,cAAc,+BAA8B,gBAAgB,YAAY,MAAM,aAAa;AACjG,gBAAM,wBAAwB,OAAO,YAAY,iBAAiB,aAAa,SAAS;AACxF,cAAI,sBAAsB,SAAS,GAAG;AAClC,mBAAO,YAAY,cAAc,WAAW;AAC5C,mBAAO,YAAY,WAAW,+BAA8B,cAAc,aAAa,aAAa,CAAC;AACrG,mBAAO,YAAY,WAAW,+BAA8B,YAAY,aAAa,aAAa,CAAC;AAAA,UACvG;AAAA,QACJ,CAAC;AAAA,MACL,SACO,GAAG;AAAA,MAEV;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,QAAI,+BAA8B,2BAA2B,GAAG;AAC5D,UAAI;AACA,eAAO,YAAY,KAAK,KAAK,SAAS;AAAA,MAC1C,SACO,GAAG;AAAA,MAEV;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,iBAAiB;AACb,QAAI,+BAA8B,2BAA2B,GAAG;AAC5D,UAAI;AACA,eAAO,YAAY,KAAK,KAAK,OAAO;AACpC,eAAO,YAAY,QAAQ,KAAK,aAAa,KAAK,WAAW,KAAK,OAAO;AAAA,MAC7E,SACO,GAAG;AAAA,MAEV;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,mBAAmB;AACf,QAAI,+BAA8B,2BAA2B,GAAG;AAC5D,UAAI;AACA,cAAM,wBAAwB,OAAO,YAAY,iBAAiB,KAAK,aAAa,SAAS;AAC7F,YAAI,sBAAsB,SAAS,GAAG;AAClC,gBAAM,aAAa,sBAAsB,CAAC,EAAE;AAC5C,iBAAO,YAAY,cAAc,KAAK,WAAW;AACjD,iBAAO,YAAY,WAAW,KAAK,SAAS;AAC5C,iBAAO,YAAY,WAAW,KAAK,OAAO;AAC1C,iBAAO;AAAA,QACX;AAAA,MACJ,SACO,GAAG;AAAA,MAEV;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
